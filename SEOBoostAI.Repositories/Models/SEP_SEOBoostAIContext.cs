// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;

namespace SEOBoostAI.Repository.Models;

public partial class SEP_SEOBoostAIContext : DbContext
{
    public SEP_SEOBoostAIContext()
    {
    }

    public SEP_SEOBoostAIContext(DbContextOptions<SEP_SEOBoostAIContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ContentOptimization> ContentOptimizations { get; set; }

    public virtual DbSet<Element> Elements { get; set; }

    public virtual DbSet<Feature> Features { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<Performance> Performances { get; set; }

    public virtual DbSet<PurchasedFeature> PurchasedFeatures { get; set; }

    public virtual DbSet<QuestionDatum> QuestionData { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserMonthlyFreeQuotum> UserMonthlyFreeQuota { get; set; }

    public virtual DbSet<Wallet> Wallets { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=HANAYUKI;Initial Catalog=SEP_SEOBoostAI;Persist Security Info=True;User ID=sa;Password=12345;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ContentOptimization>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__ContentO__3214EC270D7B5584");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.User).WithMany(p => p.ContentOptimizations).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Element>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Elements__3214EC27ED431D42");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Performance).WithMany(p => p.Elements).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Feature>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Features__3214EC272C20899C");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Feedback__3214EC27D248524D");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.User).WithMany(p => p.Feedbacks).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Performance>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Performa__3214EC271FCF27F8");

            entity.Property(e => e.FetchTime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.User).WithMany(p => p.Performances).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PurchasedFeature>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Purchase__3214EC27EC33E6CE");

            entity.Property(e => e.PurchaseDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Feature).WithMany(p => p.PurchasedFeatures).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Transaction).WithMany(p => p.PurchasedFeatures).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<QuestionDatum>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Question__3214EC27A72EC4B6");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.User).WithMany(p => p.QuestionData)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuestionDatas_Users_UserID");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Transact__3214EC27F5C629C1");

            entity.Property(e => e.RequestTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Status).HasDefaultValue("PENDING");

            entity.HasOne(d => d.Wallet).WithMany(p => p.Transactions).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Users__3214EC274729BBA9");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<UserMonthlyFreeQuotum>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__UserMont__3214EC27046B5AF9");

            entity.Property(e => e.MonthYear).IsFixedLength();
            entity.Property(e => e.MonthlyLimit).HasDefaultValue(3);

            entity.HasOne(d => d.Feature).WithMany(p => p.UserMonthlyFreeQuota).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.User).WithMany(p => p.UserMonthlyFreeQuota).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Wallet>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Wallets__3214EC27743255E6");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(NULL)");

            entity.HasOne(d => d.User).WithOne(p => p.Wallet).OnDelete(DeleteBehavior.ClientSetNull);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}